import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:latlong2/latlong.dart';
import '../adventure_details.dart';

class GeolocationService {
  static Future<void> promptGeolocation(BuildContext context, Function(LatLng) onLocationFetched) async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();

    if (!serviceEnabled) {
      await _showLocationServiceDialog(context);
      return;
    }

    LocationPermission permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await _showPermissionDialog(context);
    }

    if (permission == LocationPermission.always || permission == LocationPermission.whileInUse) {
      final position = await Geolocator.getCurrentPosition(
        desiredAccuracy: LocationAccuracy.bestForNavigation,
      );
      final loc = LatLng(position.latitude, position.longitude);
      onLocationFetched(loc);
    }
  }

  static Future<void> _showLocationServiceDialog(BuildContext context) async {
    return showDialog(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('Enable Location'),
        content: const Text('Location services are disabled. Please enable them.'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.pop(dialogContext);
              Geolocator.openLocationSettings();
            },
            child: const Text('Open Settings'),
          ),
        ],
      ),
    );
  }

  static Future<LocationPermission> _showPermissionDialog(BuildContext context) async {
    final permission = await showDialog<LocationPermission>(
      context: context,
      builder: (dialogContext) => AlertDialog(
        title: const Text('Location Permission'),
        content: const Text('This app needs location access to proceed.'),
        actions: [
          TextButton(
            onPressed: () async {
              final newPermission = await Geolocator.requestPermission();
              Navigator.pop(dialogContext, newPermission);
            },
            child: const Text('Allow'),
          ),
        ],
      ),
    );
    return permission ?? LocationPermission.denied;
  }

  static void navigateToHikeDetails(BuildContext context, LatLng loc) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => HikeDetailsPage(initialCenter: loc),
      ),
    );
  }
}